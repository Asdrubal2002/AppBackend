"""
Django settings for marketplace project.

Generated by 'django-admin startproject' using Django 4.2.21.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
import mongoengine
from datetime import timedelta
import pymongo
from pymongo import MongoClient

from dotenv import load_dotenv
from dotenv import load_dotenv
import dj_database_url
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
# import warnings

# warnings.filterwarnings("ignore", category=FutureWarning, module="huggingface_hub")
# SECURITY WARNING: keep the secret key used in production secret!



# Cargar variables desde .env
load_dotenv(os.path.join(BASE_DIR, ".env"))



SECRET_KEY = os.getenv("SECRET_KEY")
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1")

ALLOWED_HOSTS = [
    '*'            # Nombre del contenedor para acceso interno en Docker
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',  # <--- esto es clave para GeoDjango
    'apps.users',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',  # Para manejar los tokens revocados
    'apps.locations',
    'corsheaders',
    'apps.stores',
    'apps.carts',
    'apps.notification',
    'import_export',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'marketplace.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'marketplace.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#      'default': {
#          'ENGINE': 'django.contrib.gis.db.backends.postgis',
#          'NAME': 'marketplace_db',
#          'USER': 'user',
#          'PASSWORD': 'password',
#          'HOST': 'db_postgres',
#          'PORT': '5432',
#      }
#  }

DATABASES = {
    'default': dj_database_url.parse(
         os.getenv("DATABASE_URL"),
         conn_max_age=600,
         ssl_require=True
     )
 }
# Forzar PostGIS como engine
DATABASES['default']['ENGINE'] = 'django.contrib.gis.db.backends.postgis'



MONGO_URI = os.getenv("MONGO_URI")
MONGO_DB_NAME = os.getenv("MONGO_DB_NAME")

mongo_client = MongoClient(MONGO_URI)
mongo_db = mongo_client[MONGO_DB_NAME]



# # Configuración de MongoDB
# MONGO_DB_NAME = "marketplace"
# MONGO_URI = "mongodb://admin:password@db_mongo:27017/"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
#LANGUAGE_CODE = 'en-us'

LANGUAGE_CODE = 'es'

TIME_ZONE = 'America/Bogota'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        #'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

# ¿Qué es el ACCESS_TOKEN?
# Es el token JWT que contiene la identidad del usuario y sus permisos. Es lo que le dice al backend:
# “Soy este usuario, déjame hacer esta petición”.
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),  # Tiempo de expiración del token de acceso
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),     # Tiempo de expiración del token de refresco
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,

    'AUTH_HEADER_TYPES': ('Bearer',),                     # Usa formato Bearer
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_BLACKLIST_ENABLED': True,                      # Opcional: explícito
}

#Mientras esta en desarrollo
CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = [
    "http://192.168.39.177:8000",  # Django backend
    "http://192.168.39.177:5173",  # Vite frontend (si usas uno)
    "http://192.168.39.177:19000", # Expo Go DevTools (React Native)
]

CSRF_TRUSTED_ORIGINS = [
    "http://192.168.39.177",
    "http://192.168.39.177:8000",
    "http://192.168.39.177:5173",
    "http://192.168.39.177:19000",
]

# Aumentar límite de carga de archivos
DATA_UPLOAD_MAX_MEMORY_SIZE = 262144000  # 100 MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 250 MB

# Usar almacenamiento temporal para archivos pesados (en disco, no RAM)
FILE_UPLOAD_HANDLERS = [
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
]

# Habilitar el uso de cookies con CORS (si vas a usar cookies para mantener la sesión)
# Puedes usar este modo temporal para permitir todo (solo en desarrollo):
CORS_ALLOW_CREDENTIALS = True

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'